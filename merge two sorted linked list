#include<bits/stdc++.h>
using namespace std;
struct Node{
	int data;
	Node *next;
};

Node* newnode(int val){
	Node* temp=new Node;
	temp->data=val;
	temp->next=NULL;
	return temp;
}

Node* createnewlinkedlist(int n){
	int a;
	Node* head=NULL;
	
	for(int i=0;i<n;i++){
		cin>>a;
		Node* temp=newnode(a);
		
		if(head==NULL){
			head=temp;
		}
		else{
			Node* tail=head;
			while(tail->next!=NULL){
				tail=tail->next;
			}
			tail->next=temp;
		}
		
	}
	return head;
}

void printlinkedlist(Node* head)
{
	while(head!=NULL){
		cout<<head->data<<"-> ";
		
		head=head->next;
	}
}

int getSizeOfLinkedList(Node *head){
	int c=0;
	Node* ptr=head;
	while(ptr!=NULL){
		ptr=ptr->next;
		c++;
	}
	return c;
}

/**
 * getKthNodeOfLinkedList will take head  of linkedList and an positive interger k in input and 
 * it's will return kth node (1 based counting)
 * */

Node* getKthNodeOfLinkedList(Node *head, int k){
	int count=1;
	Node* ptr=head;
	while(count<k){
		ptr=ptr->next;
		count++;
	}
	head=ptr;
	return head;
}



Node* mergetwosortedlinkedlist(Node* head1,Node* head2){
 Node* ptr1=head1;
 Node* ptr2=head2;
Node *ptr3=(Node*)malloc(sizeof(Node));
	Node *ans=(Node*)malloc(sizeof(Node));
	ans=ptr3;
 while(ptr1!=NULL && ptr2!=NULL){
 	if((ptr1->data)<(ptr2->data)){
 		ans->next=ptr1;
 		ptr1=ptr1->next;
 		ans=ans->next;
 	}
 	else{
 		ans->next=ptr2;
 		ptr2=ptr2->next;
 		ans=ans->next;
 	}
}
while(ptr1!=NULL){
		ans->next=ptr1;
		ptr1=ptr1->next;
		ans=ans->next;
	}
	while(ptr2!=NULL){
		ans->next=ptr2;
		ptr2=ptr2->next;
		ans=ans->next;
	}
	return ptr3->next;
}
Node* sort(Node* head){
	if(head==NULL && head->next==NULL){
		return head;
	}
	int size=getSizeOfLinkedList(head);
	Node* mid=getKthNodeOfLinkedList(head,size/2);
	Node* head1=mid->next;
	mid->next=NULL;
	
	head=sort(head);
	head1=sort(head1);
	
	Node* sortedlinkedlist=mergetwosortedlinkedlist(head,head1);
	return sortedlinkedlist;
}

int main(){
	int n;
	cin>>n;
	Node* head=createnewlinkedlist(n);
	head=sort(head);
	cout<<"sorted linkedList: "; 
	printlinkedlist(head);
	return 0;
}
	
	
